#!/usr/bin/env bash

# Script for better git status overview for a git repository

# TODO: Combine git repo name and [branch]
# TODO: Change Remote name to cyan
# TODO: Move most resent commit time next to git info title
# TODO: Change status to single letters instead of full name

# Output colors and style
black='\033[30m'
l_black='\033[90m'
red='\033[31m'
green='\033[32m'
yellow='\033[33m'
blue='\033[34m'
magenta='\033[35m'
cyan='\033[36m'
white='\033[37m'
l_white='\033[97m'

dim='\033[2m'
bold='\033[1m'
italic='\033[3m'
underline='\033[4m'
reset='\033[0m'

# Output helper
dash_output () { # default length is 5 dashes
    if [[ -n "$1" ]]; then
        str_len=${#1}
        word_space=$((str_len + 1))
        term_width=$(tput cols)
        num_of_dashes=$((term_width - word_space))
    else
        num_of_dashes=5
    fi

    dashes=""
    for ((i = 0; i < num_of_dashes; i++)); do
        dashes+="━"
    done

    echo "${dashes}"
}

last_commit () {
    last_log=$(git --no-pager log -1 --format=%ct)
    current_time=$(date +%s)

    time_since=$((current_time - last_log)) # initially in seconds

    # return the unit of time that makes the most sense
    if [[ ${time_since} -lt 60 ]]; then # less than min
        if [[ ${time_since} -gt 1 ]]; then
            echo "${time_since} seconds ago"
        else
            echo "${time_since} second ago"
        fi
    elif [[ ${time_since} -lt 3600 ]]; then # less than hour
        time_since=$((time_since / 60))
        if [[ ${time_since} -gt 1 ]]; then
            echo "${time_since} minutes ago"
        else
            echo "${time_since} minute ago"
        fi
    elif [[ ${time_since} -lt 86400 ]]; then # less than day
        time_since=$((time_since / 3600))
        if [[ ${time_since} -gt 1 ]]; then
            echo "${time_since} hours ago"
        else
            echo "${time_since} hour ago"
        fi
    elif [[ ${time_since} -lt 604800 ]]; then # less than week
        time_since=$((time_since / 86400))
        if [[ ${time_since} -gt 1 ]]; then
            echo "${time_since} days ago"
        else
            echo "${time_since} day ago"
        fi
    else # weeks
        time_since=$((time_since / 604800))
        if [[ ${time_since} -gt 1 ]]; then
            echo "${time_since} weeks ago"
        else
            echo "${time_since} week ago"
        fi
    fi
}

# Ensure the script is called inside of a git repo
top_level_path=$(git rev-parse --show-toplevel 2> /dev/null)
if [[ ! -n "$top_level_path" ]]; then
    echo -e "${red}${bold}ERROR:${reset} You are not currently located in a git repository."
    echo -e "${yellow}Please run this script from inside a git repository.${reset}"
    exit
fi


# Retrieve and process local git repo status
readarray -t status_array <<< "$(git status --porcelain=v1)"

added=0
deleted=0
modified=0
renamed=0
untracked=0
other=0

for status_element in "${status_array[@]}"; do
    status_of_file="$(echo ${status_element} | awk '{print $1}')"

    # status_description="$(echo ${status_element} | awk '{$1=""; sub(/^ +/, ""); print}')"
    # echo -e "${status_of_file} -- ${status_description}"

    case "${status_of_file}" in
        "A")
            ((added++))
            ;;
        "D")
            ((deleted++))
            ;;
        "M")
            ((modified++))
            ;;
        "R")
            ((renamed++))
            ;;
        "??")
            ((untracked++))
            ;;
        *)
            ;;
    esac
done

# --- --- --- Print Results --- --- --- #

# General Repo Info --------------------------------------------------------------

# Repo Info Title ------------------------------------------
echo -e "${l_black}${dim}\
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳\
$(dash_output '                               ')"
#
echo -e "\
┃${reset}${cyan}${bold}  Git Repository Information \
${reset}${l_black}${dim}┃"
#
echo -e "\
┡┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
# ----------------------------------------------------------

# Git Directory Name ---------------------------------------
top_level_name=$(basename "${top_level_path}")
#
echo -e "\
╰┃ ${reset}${blue}󰆌 ${white}Name    \
${black} ${blue}${top_level_name^^}"
# ----------------------------------------------------------

# Git Branch -----------------------------------------------
branch_name=$(git branch --show-current)
#
echo -e "${l_black}${dim} \
┃ ${reset}${cyan}󰷹 ${white}Branch  \
${black} ${cyan}${branch_name^^}"
# ----------------------------------------------------------

# Remote Location ------------------------------------------
remote_loc=$(git remote get-url origin 2> /dev/null)
remote_name=$(echo ${remote_loc} | sed 's/git@github\.com:\(.*\)\.git/\1/')
#
echo -e -n "${l_black}${dim}\
╭┃ "
if [[ -n "$remote_loc" ]]; then
     echo -e "${reset}${blue}󰊤 ${white}Remote  \
${black} ${blue}${remote_name}"
else
    echo -e "${blue}󰊤 ${l_black}Remote  \
${black} No origin configured"
fi
# ----------------------------------------------------------

# Time of Last Commint -------------------------------------
branch_name=$(git branch --show-current)
#
echo -e "${l_black}${dim}\
│┃ ${reset}${cyan}󰦖 ${white}Updated \
${black} ${cyan}$(last_commit)"
# ----------------------------------------------------------
# --------------------------------------------------------------------------------

# Git Status ---------------------------------------------------------------------
# Status Title ---------------------------------------------
echo -e "${l_black}${dim}\
┢┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"
#
echo -e -n "\
┃${reset}${blue}${bold} 󰣕 Status of Changes \
${l_black}${dim}│ "
#
# ahead/behind -----------
remote_loc=$(git remote get-url origin 2> /dev/null)
#
if [[ -n "$remote_loc" ]]; then
    echo -e -n "${reset}\
${cyan} ${bold}$(git rev-list --count @{upstream}..HEAD) \
${reset}${red} ${bold}$(git rev-list --count HEAD..@{upstream}) "
else
    echo -e -n " 0  0 "
fi
echo -e "${l_black}${dim}┃"
# ------------------------
#
echo -e "\
┡┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"
# ----------------------------------------------------------

# Added / Removed Line -------------------------------------
echo -e -n "\
│┃ ${reset}${cyan} ${dim}A  \
${reset}${black}  ${cyan}${bold}${added} ${l_black}${dim}╷ "
#
echo -e "\
${reset}${red} ${dim}R  \
${reset}${black}  ${red}${bold}${deleted}"
# ----------------------------------------------------------

# Seperator ------------------------------------------------
echo -e "${l_black}${dim}\
╰┃ ──────────┼──────────"
# ----------------------------------------------------------

# Modified / Untracked Line --------------------------------
echo -e -n "\
╭┃ ${reset}${blue} ${dim}M  \
${reset}${black}  ${blue}${bold}${modified} ${l_black}${dim}╵ "
#
echo -e "\
${reset}${yellow} ${dim}U  \
${reset}${black}  ${yellow}${bold}${untracked}"
# ----------------------------------------------------------

# Bottom line ----------------------------------------------
echo -e "${l_black}${dim}\
┕┻$(dash_output ' ')${reset}"
# ----------------------------------------------------------
